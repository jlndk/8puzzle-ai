{"version":3,"sources":["../../src/comlink.ts","src/lib/util.ts","src/game/Grid.ts","node_modules/ts-priority-queue/src/BinaryHeapStrategy.js","node_modules/ts-priority-queue/src/PriorityQueue.js","node_modules/ts-priority-queue/index.js","src/ai/AStarAI.ts","src/game/EightPuzzle.ts","src/sketch.ts","src/ai/worker.ts"],"names":[],"mappings":"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","file":"worker.3aef24d1.js","sourceRoot":"..","sourcesContent":["/**\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  EventSource,\n  Message,\n  MessageType,\n  PostMessageWithOrigin,\n  WireValue,\n  WireValueType,\n} from \"./protocol\";\nexport { Endpoint };\n\nexport const proxyMarker = Symbol(\"Comlink.proxy\");\nexport const createEndpoint = Symbol(\"Comlink.endpoint\");\nexport const releaseProxy = Symbol(\"Comlink.releaseProxy\");\n\nconst throwMarker = Symbol(\"Comlink.thrown\");\n\n/**\n * Interface of values that were marked to be proxied with `comlink.proxy()`.\n * Can also be implemented by classes.\n */\nexport interface ProxyMarked {\n  [proxyMarker]: true;\n}\n\n/**\n * Takes a type and wraps it in a Promise, if it not already is one.\n * This is to avoid `Promise<Promise<T>>`.\n *\n * This is the inverse of `Unpromisify<T>`.\n */\ntype Promisify<T> = T extends Promise<unknown> ? T : Promise<T>;\n/**\n * Takes a type that may be Promise and unwraps the Promise type.\n * If `P` is not a Promise, it returns `P`.\n *\n * This is the inverse of `Promisify<T>`.\n */\ntype Unpromisify<P> = P extends Promise<infer T> ? T : P;\n\n/**\n * Takes the raw type of a remote property and returns the type that is visible to the local thread on the proxy.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions.\n * See https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype RemoteProperty<T> =\n  // If the value is a method, comlink will proxy it automatically.\n  // Objects are only proxied if they are marked to be proxied.\n  // Otherwise, the property is converted to a Promise that resolves the cloned value.\n  T extends Function | ProxyMarked ? Remote<T> : Promisify<T>;\n\n/**\n * Takes the raw type of a property as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This is the inverse of `RemoteProperty<T>`.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions. See\n * https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype LocalProperty<T> = T extends Function | ProxyMarked\n  ? Local<T>\n  : Unpromisify<T>;\n\n/**\n * Proxies `T` if it is a `ProxyMarked`, clones it otherwise (as handled by structured cloning and transfer handlers).\n */\nexport type ProxyOrClone<T> = T extends ProxyMarked ? Remote<T> : T;\n/**\n * Inverse of `ProxyOrClone<T>`.\n */\nexport type UnproxyOrClone<T> = T extends RemoteObject<ProxyMarked>\n  ? Local<T>\n  : T;\n\n/**\n * Takes the raw type of a remote object in the other thread and returns the type as it is visible to the local thread\n * when proxied with `Comlink.proxy()`.\n *\n * This does not handle call signatures, which is handled by the more general `Remote<T>` type.\n *\n * @template T The raw type of a remote object as seen in the other thread.\n */\nexport type RemoteObject<T> = { [P in keyof T]: RemoteProperty<T[P]> };\n/**\n * Takes the type of an object as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This does not handle call signatures, which is handled by the more general `Local<T>` type.\n *\n * This is the inverse of `RemoteObject<T>`.\n *\n * @template T The type of a proxied object.\n */\nexport type LocalObject<T> = { [P in keyof T]: LocalProperty<T[P]> };\n\n/**\n * Additional special comlink methods available on each proxy returned by `Comlink.wrap()`.\n */\nexport interface ProxyMethods {\n  [createEndpoint]: () => Promise<MessagePort>;\n  [releaseProxy]: () => void;\n}\n\n/**\n * Takes the raw type of a remote object, function or class in the other thread and returns the type as it is visible to\n * the local thread from the proxy return value of `Comlink.wrap()` or `Comlink.proxy()`.\n */\nexport type Remote<T> =\n  // Handle properties\n  RemoteObject<T> &\n    // Handle call signature (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: UnproxyOrClone<TArguments[I]> }\n        ) => Promisify<ProxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: UnproxyOrClone<TArguments[I]>;\n            }\n          ): Promisify<Remote<TInstance>>;\n        }\n      : unknown) &\n    // Include additional special comlink methods available on the proxy.\n    ProxyMethods;\n\n/**\n * Expresses that a type can be either a sync or async.\n */\ntype MaybePromise<T> = Promise<T> | T;\n\n/**\n * Takes the raw type of a remote object, function or class as a remote thread would see it through a proxy (e.g. when\n * passed in as a function argument) and returns the type the local thread has to supply.\n *\n * This is the inverse of `Remote<T>`. It takes a `Remote<T>` and returns its original input `T`.\n */\nexport type Local<T> =\n  // Omit the special proxy methods (they don't need to be supplied, comlink adds them)\n  Omit<LocalObject<T>, keyof ProxyMethods> &\n    // Handle call signatures (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: ProxyOrClone<TArguments[I]> }\n        ) => // The raw function could either be sync or async, but is always proxied automatically\n        MaybePromise<UnproxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: ProxyOrClone<TArguments[I]>;\n            }\n          ): // The raw constructor could either be sync or async, but is always proxied automatically\n          MaybePromise<Local<Unpromisify<TInstance>>>;\n        }\n      : unknown);\n\nconst isObject = (val: unknown): val is object =>\n  (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n\n/**\n * Customizes the serialization of certain values as determined by `canHandle()`.\n *\n * @template T The input type being handled by this transfer handler.\n * @template S The serialized type sent over the wire.\n */\nexport interface TransferHandler<T, S> {\n  /**\n   * Gets called for every value to determine whether this transfer handler\n   * should serialize the value, which includes checking that it is of the right\n   * type (but can perform checks beyond that as well).\n   */\n  canHandle(value: unknown): value is T;\n\n  /**\n   * Gets called with the value if `canHandle()` returned `true` to produce a\n   * value that can be sent in a message, consisting of structured-cloneable\n   * values and/or transferrable objects.\n   */\n  serialize(value: T): [S, Transferable[]];\n\n  /**\n   * Gets called to deserialize an incoming value that was serialized in the\n   * other thread with this transfer handler (known through the name it was\n   * registered under).\n   */\n  deserialize(value: S): T;\n}\n\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler: TransferHandler<object, MessagePort> = {\n  canHandle: (val): val is ProxyMarked =>\n    isObject(val) && (val as ProxyMarked)[proxyMarker],\n  serialize(obj) {\n    const { port1, port2 } = new MessageChannel();\n    expose(obj, port1);\n    return [port2, [port2]];\n  },\n  deserialize(port) {\n    port.start();\n    return wrap(port);\n  },\n};\n\ninterface ThrownValue {\n  [throwMarker]: unknown; // just needs to be present\n  value: unknown;\n}\ntype SerializedThrownValue =\n  | { isError: true; value: Error }\n  | { isError: false; value: unknown };\n\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler: TransferHandler<\n  ThrownValue,\n  SerializedThrownValue\n> = {\n  canHandle: (value): value is ThrownValue =>\n    isObject(value) && throwMarker in value,\n  serialize({ value }) {\n    let serialized: SerializedThrownValue;\n    if (value instanceof Error) {\n      serialized = {\n        isError: true,\n        value: {\n          message: value.message,\n          name: value.name,\n          stack: value.stack,\n        },\n      };\n    } else {\n      serialized = { isError: false, value };\n    }\n    return [serialized, []];\n  },\n  deserialize(serialized) {\n    if (serialized.isError) {\n      throw Object.assign(\n        new Error(serialized.value.message),\n        serialized.value\n      );\n    }\n    throw serialized.value;\n  },\n};\n\n/**\n * Allows customizing the serialization of certain values.\n */\nexport const transferHandlers = new Map<\n  string,\n  TransferHandler<unknown, unknown>\n>([\n  [\"proxy\", proxyTransferHandler],\n  [\"throw\", throwTransferHandler],\n]);\n\nexport function expose(obj: any, ep: Endpoint = self as any) {\n  ep.addEventListener(\"message\", function callback(ev: MessageEvent) {\n    if (!ev || !ev.data) {\n      return;\n    }\n    const { id, type, path } = {\n      path: [] as string[],\n      ...(ev.data as Message),\n    };\n    const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n    let returnValue;\n    try {\n      const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n      const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n      switch (type) {\n        case MessageType.GET:\n          {\n            returnValue = rawValue;\n          }\n          break;\n        case MessageType.SET:\n          {\n            parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n            returnValue = true;\n          }\n          break;\n        case MessageType.APPLY:\n          {\n            returnValue = rawValue.apply(parent, argumentList);\n          }\n          break;\n        case MessageType.CONSTRUCT:\n          {\n            const value = new rawValue(...argumentList);\n            returnValue = proxy(value);\n          }\n          break;\n        case MessageType.ENDPOINT:\n          {\n            const { port1, port2 } = new MessageChannel();\n            expose(obj, port2);\n            returnValue = transfer(port1, [port1]);\n          }\n          break;\n        case MessageType.RELEASE:\n          {\n            returnValue = undefined;\n          }\n          break;\n      }\n    } catch (value) {\n      returnValue = { value, [throwMarker]: 0 };\n    }\n    Promise.resolve(returnValue)\n      .catch((value) => {\n        return { value, [throwMarker]: 0 };\n      })\n      .then((returnValue) => {\n        const [wireValue, transferables] = toWireValue(returnValue);\n        ep.postMessage({ ...wireValue, id }, transferables);\n        if (type === MessageType.RELEASE) {\n          // detach and deactive after sending release response above.\n          ep.removeEventListener(\"message\", callback as any);\n          closeEndPoint(ep);\n        }\n      });\n  } as any);\n  if (ep.start) {\n    ep.start();\n  }\n}\n\nfunction isMessagePort(endpoint: Endpoint): endpoint is MessagePort {\n  return endpoint.constructor.name === \"MessagePort\";\n}\n\nfunction closeEndPoint(endpoint: Endpoint) {\n  if (isMessagePort(endpoint)) endpoint.close();\n}\n\nexport function wrap<T>(ep: Endpoint, target?: any): Remote<T> {\n  return createProxy<T>(ep, [], target) as any;\n}\n\nfunction throwIfProxyReleased(isReleased: boolean) {\n  if (isReleased) {\n    throw new Error(\"Proxy has been released and is not useable\");\n  }\n}\n\nfunction createProxy<T>(\n  ep: Endpoint,\n  path: (string | number | symbol)[] = [],\n  target: object = function () {}\n): Remote<T> {\n  let isProxyReleased = false;\n  const proxy = new Proxy(target, {\n    get(_target, prop) {\n      throwIfProxyReleased(isProxyReleased);\n      if (prop === releaseProxy) {\n        return () => {\n          return requestResponseMessage(ep, {\n            type: MessageType.RELEASE,\n            path: path.map((p) => p.toString()),\n          }).then(() => {\n            closeEndPoint(ep);\n            isProxyReleased = true;\n          });\n        };\n      }\n      if (prop === \"then\") {\n        if (path.length === 0) {\n          return { then: () => proxy };\n        }\n        const r = requestResponseMessage(ep, {\n          type: MessageType.GET,\n          path: path.map((p) => p.toString()),\n        }).then(fromWireValue);\n        return r.then.bind(r);\n      }\n      return createProxy(ep, [...path, prop]);\n    },\n    set(_target, prop, rawValue) {\n      throwIfProxyReleased(isProxyReleased);\n      // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n      // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n      const [value, transferables] = toWireValue(rawValue);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.SET,\n          path: [...path, prop].map((p) => p.toString()),\n          value,\n        },\n        transferables\n      ).then(fromWireValue) as any;\n    },\n    apply(_target, _thisArg, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const last = path[path.length - 1];\n      if ((last as any) === createEndpoint) {\n        return requestResponseMessage(ep, {\n          type: MessageType.ENDPOINT,\n        }).then(fromWireValue);\n      }\n      // We just pretend that `bind()` didn’t happen.\n      if (last === \"bind\") {\n        return createProxy(ep, path.slice(0, -1));\n      }\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.APPLY,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n    construct(_target, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.CONSTRUCT,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n  });\n  return proxy as any;\n}\n\nfunction myFlat<T>(arr: (T | T[])[]): T[] {\n  return Array.prototype.concat.apply([], arr);\n}\n\nfunction processArguments(argumentList: any[]): [WireValue[], Transferable[]] {\n  const processed = argumentList.map(toWireValue);\n  return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\n\nconst transferCache = new WeakMap<any, Transferable[]>();\nexport function transfer(obj: any, transfers: Transferable[]) {\n  transferCache.set(obj, transfers);\n  return obj;\n}\n\nexport function proxy<T>(obj: T): T & ProxyMarked {\n  return Object.assign(obj, { [proxyMarker]: true }) as any;\n}\n\nexport function windowEndpoint(\n  w: PostMessageWithOrigin,\n  context: EventSource = self,\n  targetOrigin = \"*\"\n): Endpoint {\n  return {\n    postMessage: (msg: any, transferables: Transferable[]) =>\n      w.postMessage(msg, targetOrigin, transferables),\n    addEventListener: context.addEventListener.bind(context),\n    removeEventListener: context.removeEventListener.bind(context),\n  };\n}\n\nfunction toWireValue(value: any): [WireValue, Transferable[]] {\n  for (const [name, handler] of transferHandlers) {\n    if (handler.canHandle(value)) {\n      const [serializedValue, transferables] = handler.serialize(value);\n      return [\n        {\n          type: WireValueType.HANDLER,\n          name,\n          value: serializedValue,\n        },\n        transferables,\n      ];\n    }\n  }\n  return [\n    {\n      type: WireValueType.RAW,\n      value,\n    },\n    transferCache.get(value) || [],\n  ];\n}\n\nfunction fromWireValue(value: WireValue): any {\n  switch (value.type) {\n    case WireValueType.HANDLER:\n      return transferHandlers.get(value.name)!.deserialize(value.value);\n    case WireValueType.RAW:\n      return value.value;\n  }\n}\n\nfunction requestResponseMessage(\n  ep: Endpoint,\n  msg: Message,\n  transfers?: Transferable[]\n): Promise<WireValue> {\n  return new Promise((resolve) => {\n    const id = generateUUID();\n    ep.addEventListener(\"message\", function l(ev: MessageEvent) {\n      if (!ev.data || !ev.data.id || ev.data.id !== id) {\n        return;\n      }\n      ep.removeEventListener(\"message\", l as any);\n      resolve(ev.data);\n    } as any);\n    if (ep.start) {\n      ep.start();\n    }\n    ep.postMessage({ id, ...msg }, transfers);\n  });\n}\n\nfunction generateUUID(): string {\n  return new Array(4)\n    .fill(0)\n    .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n    .join(\"-\");\n}\n","export function shuffleArray<T>(array: T[]): T[] {\n    const buf = [...array];\n    for (let i = buf.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [buf[i], buf[j]] = [buf[j], buf[i]];\n    }\n    return buf;\n}\n\nexport function findIndex2D<T>(arr: T[][], val: T): [number, number] | undefined {\n    for (let y = 0; y < arr.length; y++) {\n        const row = arr[y];\n        for (let x = 0; x < row.length; x++) {\n            const item = row[x];\n            if (item === val) {\n                return [x, y];\n            }\n        }\n    }\n}\n\nexport function to2D<T>(src: T[], size: number): T[][] {\n    const dst: T[][] = [];\n    for (let i = 0; i < size; i++) {\n        dst[i] = [];\n        for (let j = 0; j < size; j++) {\n            const n = src.shift();\n            if (n === undefined) {\n                throw new Error(`Not enough numbers in src to convert into 2d array with size ${size}`);\n            }\n            dst[i][j] = n;\n        }\n    }\n\n    return dst;\n}\n\nexport function range(size: number): number[] {\n    const numbers = [];\n    for (let i = 0; i < size; i++) {\n        numbers.push(i + 1);\n    }\n    return numbers;\n}\n\nexport function sum<T>(arr: T[], map: (item: T, i: number) => number): number {\n    return arr.reduce<number>((sum, val, i) => sum + map(val, i), 0);\n}\n\nexport function sum2D<T>(outer: T[][], map: (item: T, i: number, j: number) => number): number {\n    return sum(outer, (inner, i) => {\n        return sum(inner, (cell, j) => map(cell, i, j));\n    });\n}\n\nexport function factorial(n: number): number {\n    return n < 2 ? 1 : n * factorial(n - 1);\n}\n\nexport function formatNumber(number: number): string {\n    const formatter = new Intl.NumberFormat('da', { maximumSignificantDigits: 3 });\n    return formatter.format(number);\n}\n\nexport const toMb = (n: number) => (n / (1024 * 1024)).toFixed(2) + 'MB';\n\nexport function sizeOf(obj: any): number {\n    const typeSizes: { [key: string]: (item: any) => number } = {\n        undefined: () => 0,\n        boolean: () => 4,\n        number: () => 8,\n        string: (item: string) => 2 * item.length,\n        object: (item: object) => {\n            if (!item) return 0;\n            return sum<string>(Object.keys(item), (key) => size(key) + size(item[key as keyof typeof item]));\n        },\n    };\n\n    const size = (value: any): any => typeSizes[typeof value](value);\n    return size(obj);\n}\n\nexport function isRunningAsWorker(): boolean {\n    // https://stackoverflow.com/a/18002694/2534355\n    return typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;\n}\n\nexport function deepCopy<T>(item: T): T {\n    return JSON.parse(JSON.stringify(item));\n}\n","import p5 from 'p5';\nimport { findIndex2D, range, shuffleArray, to2D, deepCopy } from '../lib/util';\n\nexport type Tile = {\n    x: number;\n    y: number;\n};\n\nexport enum Direction {\n    UP = 'UP',\n    DOWN = 'DOWN',\n    LEFT = 'LEFT',\n    RIGHT = 'RIGHT',\n}\n\nexport class Grid {\n    size: number;\n    tiles: (number | null)[][];\n    freeTile: Tile;\n\n    constructor(size: number, tiles: (number | null)[][], freeTile?: Tile) {\n        this.size = size;\n        this.tiles = tiles;\n        this.freeTile = freeTile ?? this.computeFreeTile();\n    }\n\n    copy(): Grid {\n        return new Grid(this.size, deepCopy(this.tiles), deepCopy(this.freeTile));\n    }\n\n    private swap(c1: Tile, c2: Tile) {\n        const tmp = this.tiles[c2.y][c2.x];\n        this.tiles[c2.y][c2.x] = this.tiles[c1.y][c1.x];\n        this.tiles[c1.y][c1.x] = tmp;\n    }\n\n    move(direction: Direction) {\n        const vecs: { [key in Direction]: Tile } = {\n            [Direction.LEFT]: { x: -1, y: 0 },\n            [Direction.RIGHT]: { x: 1, y: 0 },\n            [Direction.UP]: { x: 0, y: -1 },\n            [Direction.DOWN]: { x: 0, y: 1 },\n        };\n\n        const { x, y } = vecs[direction];\n\n        const newFree = { x: this.freeTile.x + x, y: this.freeTile.y + y };\n\n        if (newFree.x < 0 || newFree.x >= this.size || newFree.y < 0 || newFree.y >= this.size) {\n            throw new Error('Out of bounds');\n        }\n\n        this.swap(this.freeTile, newFree);\n        this.freeTile = newFree;\n    }\n\n    render(p: p5) {\n        p.rectMode(p.CORNER);\n        p.textSize(60);\n        p.textAlign(p.CENTER, p.CENTER);\n\n        const s = p.width / this.size;\n        for (let i = 0; i < this.size; i++) {\n            for (let j = 0; j < this.size; j++) {\n                const x = j * s;\n                const y = i * s;\n\n                p.fill(0);\n                p.stroke(255);\n                p.strokeWeight(1);\n                p.rect(x, y, s, s);\n\n                p.fill(255);\n\n                p.text(this.tiles[i][j] ?? '', x + s / 2, y + s / 2);\n            }\n        }\n    }\n\n    getValidMoves(): Direction[] {\n        const moves = [];\n        const end = this.size - 1;\n\n        if (this.freeTile.x !== 0) {\n            moves.push(Direction.LEFT);\n        }\n        if (this.freeTile.x !== end) {\n            moves.push(Direction.RIGHT);\n        }\n        if (this.freeTile.y !== 0) {\n            moves.push(Direction.UP);\n        }\n        if (this.freeTile.y !== end) {\n            moves.push(Direction.DOWN);\n        }\n        return moves;\n    }\n\n    static generate(size: number): { grid: Grid; desiredState: (number | null)[][] } {\n        if (size < 2) {\n            throw new Error('Grid size cannot be smaller than 2');\n        }\n\n        // Generate array from 0 to size*size (exclusive)\n        const numbers: (number | null)[] = range(size * size);\n        // Set last tile as empty\n        numbers[numbers.length - 1] = null;\n\n        // Make a shuffled copy!\n        const shuffled = shuffleArray(numbers);\n\n        // Convert 1D array into 2D\n        const tiles = to2D(shuffled, size);\n        const desiredState = to2D(numbers, size);\n\n        return {\n            grid: new Grid(size, tiles),\n            desiredState,\n        };\n    }\n\n    private computeFreeTile(): Tile {\n        const freeCell = findIndex2D(this.tiles, null);\n\n        if (!freeCell) {\n            throw new Error('No free cell was computed');\n        }\n\n        const [x, y] = freeCell;\n\n        return { x, y };\n    }\n}\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass BinaryHeapStrategy {\r\n    constructor(options) {\r\n        this.comparator = options.comparator;\r\n        this.data = options.initialValues ? options.initialValues.slice(0) : [];\r\n        this._heapify();\r\n    }\r\n    _heapify() {\r\n        if (this.data.length > 0) {\r\n            for (let i = 0; i < this.data.length; i++) {\r\n                this._bubbleUp(i);\r\n            }\r\n        }\r\n    }\r\n    queue(value) {\r\n        this.data.push(value);\r\n        this._bubbleUp(this.data.length - 1);\r\n    }\r\n    dequeue() {\r\n        const ret = this.data[0];\r\n        const last = this.data.pop();\r\n        if (this.data.length > 0 && last !== undefined) {\r\n            this.data[0] = last;\r\n            this._bubbleDown(0);\r\n        }\r\n        return ret;\r\n    }\r\n    peek() {\r\n        return this.data[0];\r\n    }\r\n    clear() {\r\n        this.data.length = 0;\r\n    }\r\n    _bubbleUp(pos) {\r\n        while (pos > 0) {\r\n            const parent = (pos - 1) >>> 1;\r\n            if (this.comparator(this.data[pos], this.data[parent]) < 0) {\r\n                const x = this.data[parent];\r\n                this.data[parent] = this.data[pos];\r\n                this.data[pos] = x;\r\n                pos = parent;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    _bubbleDown(pos) {\r\n        let last = this.data.length - 1;\r\n        while (true) {\r\n            const left = (pos << 1) + 1;\r\n            const right = left + 1;\r\n            let minIndex = pos;\r\n            if (left <= last && this.comparator(this.data[left], this.data[minIndex]) < 0) {\r\n                minIndex = left;\r\n            }\r\n            if (right <= last && this.comparator(this.data[right], this.data[minIndex]) < 0) {\r\n                minIndex = right;\r\n            }\r\n            if (minIndex !== pos) {\r\n                const x = this.data[minIndex];\r\n                this.data[minIndex] = this.data[pos];\r\n                this.data[pos] = x;\r\n                pos = minIndex;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        return void 0;\r\n    }\r\n}\r\nexports.default = BinaryHeapStrategy;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst BinaryHeapStrategy_1 = require(\"./BinaryHeapStrategy\");\r\nclass PriorityQueue {\r\n    constructor(options) {\r\n        this._length = 0;\r\n        this._length = options.initialValues ? options.initialValues.length : 0;\r\n        this.strategy = new BinaryHeapStrategy_1.default(options);\r\n    }\r\n    get length() { return this._length; }\r\n    queue(value) {\r\n        this._length++;\r\n        this.strategy.queue(value);\r\n    }\r\n    dequeue() {\r\n        if (!this._length)\r\n            throw new Error(\"Empty queue\");\r\n        this._length--;\r\n        return this.strategy.dequeue();\r\n    }\r\n    peek() {\r\n        if (!this._length)\r\n            throw new Error(\"Empty queue\");\r\n        return this.strategy.peek();\r\n    }\r\n    clear() {\r\n        this._length = 0;\r\n        this.strategy.clear();\r\n    }\r\n}\r\nexports.default = PriorityQueue;\r\n","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst PriorityQueue_1 = require(\"./src/PriorityQueue\");\r\nexports.default = PriorityQueue_1.default;\r\n","import PriorityQueue from 'ts-priority-queue';\nimport { AI } from './AI';\nimport { Grid, Direction } from '../game/Grid';\nimport { findIndex2D, sum2D, factorial, sizeOf, formatNumber, isRunningAsWorker } from '../lib/util';\nimport { Status } from '../game/EightPuzzle';\n\n/**\n * An implementation of the A* algorithm, which searches for a solution to the 8-Puzzle game\n */\nexport class AStarAI implements AI {\n    /**\n    The (priority) queue of states which has not been explored yet.\n    It is sorted asending by the \"cost-value\" of each game state.\n    **/\n    pq = new PriorityQueue<SearchNode>({\n        comparator: (a, b) => a.cost() - b.cost(),\n    });\n    /**The set of all states which has been explored in the search*/\n    explored = new StateSet();\n    /** The theoretical size of the search space, based on the size of the game board. */\n    searchSpace = 0;\n    /** The amount of memory, in bytes, a single grid is consuming. Used for memory usage metrics. */\n    gridMemSize = 0;\n\n    /**\n     * Search for a set of moves which transforms the grid into the desired state.\n     */\n    getMoves(grid: Grid, desiredState: (number | null)[][]): Direction[] {\n        // Calculate constants, for use in progress status\n        this.calculateProgressConstants(grid);\n\n        // Put initial state on queue\n        this.pq.queue(new SearchNode(grid, desiredState));\n\n        // Keep running until the queue is empty\n        // Maintain counter to decide when to report status\n        for (let i = 1; this.pq.length !== 0; i++) {\n            const node = this.pq.dequeue();\n\n            // Goal test\n            if (node.hasSolution()) {\n                console.debug(`Found solution! Explored ${formatNumber(this.explored.size)} nodes.`);\n                return node.actions;\n            }\n\n            // Report status to user, but only sometimes. Tradeoff between fast status updates and performance\n            if (i % 30000 == 0) {\n                this.reportProgress();\n            }\n\n            // Mark the current node as explored\n            this.explored.add(node);\n\n            // For each of valid moves in the current state\n            for (const move of node.moves()) {\n                // Make a copy of the current state, in order not to modify it for future iterations\n                const copy = node.copy();\n\n                // Perform the move\n                copy.move(move);\n\n                // If this new configuration is not in our explored set, add it to the queue\n                if (!this.explored.has(copy)) {\n                    this.pq.queue(copy);\n                }\n            }\n        }\n\n        // If we reach this code, no solution was found. Therefore throw error\n        const searchedPct = (this.explored.size / this.searchSpace) * 100;\n        throw new Error(\n            `Could not find a solution.\\nExplored ${formatNumber(searchedPct)}% of search space (${formatNumber(\n                this.explored.size\n            )} of ${formatNumber(this.searchSpace)} permutations)`\n        );\n    }\n\n    /**\n     * Calculate constants, for use in progress status\n     */\n    private calculateProgressConstants(grid: Grid): void {\n        // The theoretical bound of search space\n        this.searchSpace = factorial(grid.size * grid.size) / 2;\n        this.gridMemSize = sizeOf(grid);\n    }\n\n    /**\n     * Send progress updates to the main thread, in order to render the progres bar\n     */\n    private reportProgress() {\n        if (!isRunningAsWorker()) {\n            return;\n        }\n        const exploredMemSize = this.gridMemSize * this.explored.size;\n        const pqMemSize = this.gridMemSize * this.pq.length;\n        const currentExplored = this.explored.size;\n        const progress = currentExplored / this.searchSpace;\n        const percent = progress * 100;\n        const status = `(${formatNumber(currentExplored)} of ${formatNumber(this.searchSpace)} nodes explored)`;\n        self.postMessage({\n            cmd: 'ai_progress',\n            percent,\n            memory: exploredMemSize + pqMemSize,\n            status,\n        } as Status);\n    }\n}\n\n/**\n * A Simple wrapper around set, which handles comparison between search nodes (thus handling reference equality)\n */\nclass StateSet {\n    private set = new Set<string>();\n\n    add(node: SearchNode): void {\n        // Stringify state to use value equality instead of reference equality\n        this.set.add(JSON.stringify(node.getState()));\n    }\n\n    has(node: SearchNode): boolean {\n        return this.set.has(JSON.stringify(node.getState()));\n    }\n\n    get size(): number {\n        return this.set.size;\n    }\n\n    get items(): string[] {\n        return Array.from(this.set.values());\n    }\n}\n\n/**\n * Represents, and wraps, a concrete game state, and performs\n * the nessesary calculations (such as heuristics), which is\n * used during the search.\n */\nclass SearchNode {\n    grid: Grid;\n    actions: Direction[];\n    _manhattanDistanceCache: number | undefined;\n    desiredState: (number | null)[][];\n\n    constructor(grid: Grid, desiredState: (number | null)[][], previousActions: Direction[] = []) {\n        this.grid = grid;\n        this.desiredState = desiredState;\n        this.actions = previousActions;\n    }\n\n    move(action: Direction) {\n        // Invalidate manhattanDistanceCache, since it should update after a move\n        this._manhattanDistanceCache = undefined;\n\n        this.grid.move(action);\n        this.actions.push(action);\n    }\n\n    hasSolution(): boolean {\n        return JSON.stringify(this.grid.tiles) == JSON.stringify(this.desiredState);\n    }\n\n    cost(): number {\n        return this.actions.length + this.heuristic();\n    }\n\n    heuristic(): number {\n        return this.totalManhattanDistance();\n    }\n\n    /**\n     * Return the sum of manhattan distance of all cells in the grid.\n     */\n    totalManhattanDistance(): number {\n        if (this._manhattanDistanceCache) {\n            return this._manhattanDistanceCache;\n        }\n\n        const total = sum2D(this.grid.tiles, (cell, i, j) => {\n            const res = findIndex2D(this.desiredState, cell);\n\n            if (!res) {\n                const errLabel = cell === null ? '_EMPTY_' : cell;\n                throw new Error(`Could not find desired state for item ${errLabel}`);\n            }\n\n            const [x, y] = res;\n\n            return Math.abs(i - y) + Math.abs(j - x);\n        });\n\n        this._manhattanDistanceCache = total;\n\n        return total;\n    }\n\n    getState(): (number | null)[][] {\n        return this.grid.tiles;\n    }\n\n    moves(): Direction[] {\n        return this.grid.getValidMoves();\n    }\n\n    copy(): SearchNode {\n        return new SearchNode(this.grid.copy(), this.desiredState, [...this.actions]);\n    }\n}\n","import p5 from 'p5';\nimport { Grid, Direction } from './Grid';\nimport { wrap } from 'comlink';\nimport { calculateMoves } from '../ai/worker';\nimport { formatNumber, toMb } from '../lib/util';\nimport { solvers } from '../sketch';\n\nexport type Status = {\n    cmd: 'ai_progress';\n    percent: number;\n    status?: string;\n    memory?: number;\n};\n\ntype Solver = keyof typeof solvers;\n\nexport default class EightPuzzle {\n    size: number;\n\n    p: p5;\n    grid: Grid;\n    aiType: Solver;\n\n    desiredState: (number | null)[][];\n    moves: Direction[] | undefined;\n    currentMove = 0;\n    done = false;\n    errorMsg: string | undefined;\n\n    status: Status | undefined;\n\n    aiAsWorker = true;\n\n    constructor(p: p5, size: number, aiType: Solver) {\n        this.size = size;\n        this.p = p;\n        this.aiType = aiType;\n\n        this.p.createCanvas(600, 600);\n\n        this.p.background(0);\n        this.drawStatusCenter('Initializing...');\n\n        const { grid, desiredState } = Grid.generate(this.size);\n\n        this.grid = grid;\n        this.desiredState = desiredState;\n\n        this.p.frameRate(5);\n    }\n\n    init(): void {\n        this.calculateMoves().catch((err) => {\n            this.errorMsg = err;\n            this.moves = [];\n            this.p.noLoop();\n            throw err;\n        });\n    }\n\n    putAIOnMainThread(): void {\n        this.aiAsWorker = false;\n    }\n\n    private async calculateMoves(): Promise<void> {\n        if (this.aiAsWorker) {\n            return this.calculateMovesWithWorker();\n        }\n\n        // Wrap in a promise to match signature of worker\n        return new Promise((res) => {\n            const factory = solvers[this.aiType];\n            const ai = factory();\n            this.moves = ai.getMoves(this.grid.copy(), this.desiredState);\n            res();\n        });\n    }\n\n    private async calculateMovesWithWorker() {\n        const worker = new Worker('../ai/worker.ts');\n        worker.onmessage = ({ data }) => {\n            if (data.cmd === 'ai_progress') {\n                this.status = data;\n            }\n        };\n        const action = wrap<typeof calculateMoves>(worker);\n\n        this.moves = await action(this.aiType, this.size, this.grid.tiles, this.grid.freeTile, this.desiredState);\n    }\n\n    update() {\n        if (!this.moves) {\n            return;\n        }\n\n        if (this.currentMove > this.moves.length - 1) {\n            this.done = true;\n            return;\n        }\n\n        this.grid.move(this.moves[this.currentMove++]);\n    }\n\n    draw() {\n        this.p.background(0);\n\n        if (this.moves === undefined) {\n            this.drawProgress();\n            return;\n        }\n\n        if (this.errorMsg) {\n            this.grid.render(this.p);\n            this.drawStatusSmall(this.errorMsg);\n            return;\n        }\n\n        this.update();\n        this.grid.render(this.p);\n\n        if (this.done) {\n            this.drawStatusSmall(`Solved in ${this.moves.length} steps! `);\n            this.p.noLoop();\n        } else {\n            this.drawStatusSmall(`Move ${this.currentMove} of ${this.moves.length}`);\n        }\n    }\n\n    drawStatusSmall(status: string): void {\n        this.p.textSize(16);\n        this.p.textAlign(this.p.LEFT, this.p.TOP);\n        this.p.fill(255);\n        this.p.text(status, 10, 10, this.p.width - 20, this.p.height - 20);\n    }\n\n    drawStatusCenter(status: string): void {\n        this.p.textSize(30);\n        this.p.textAlign(this.p.CENTER, this.p.CENTER);\n        this.p.fill(255);\n        this.p.text(status, this.p.width / 2, this.p.height / 2);\n    }\n\n    drawProgress(): void {\n        const titleText = 'Searching for solution...';\n        if (this.status === undefined) {\n            this.drawStatusCenter(titleText);\n            return;\n        }\n\n        // Get metrics and calculate percentage\n        const { percent, memory, status } = this.status;\n\n        const centerX = this.p.width / 2;\n        const centerY = this.p.height / 2;\n\n        const titleX = centerX;\n        const titleY = centerY - 30;\n        this.p.textSize(30);\n        this.p.textAlign(this.p.CENTER, this.p.CENTER);\n        this.p.fill(255);\n        this.p.text(titleText, titleX, titleY);\n\n        const progWidth = this.p.width / 3;\n        const progHeight = 20;\n        const progX = centerX - progWidth / 2;\n        const progY = titleY + 20;\n\n        this.p.fill(0);\n        this.p.stroke(255);\n        this.p.strokeWeight(1);\n        this.p.rect(progX, progY, progWidth, progHeight);\n\n        this.p.fill(255);\n        this.p.strokeWeight(0);\n        this.p.rect(progX, progY, progWidth * (percent / 100), progHeight);\n\n        this.p.textSize(16);\n        this.p.text(`${formatNumber(percent)}% ${status ?? ''}`, centerX, progY + progHeight + 20);\n\n        if (memory !== undefined) {\n            const lbl = `Memory usage: ${toMb(memory)}`;\n\n            this.p.textAlign(this.p.LEFT, this.p.BOTTOM);\n            this.p.text(lbl, 10, this.p.height - 5);\n        }\n        // this.drawStatus(msg);\n    }\n}\n","import { AStarAI } from './ai/AStarAI';\nimport p5 from 'p5';\nimport EightPuzzle from './game/EightPuzzle';\nimport { AI } from './ai/AI';\n\nexport const solvers: { [key: string]: () => AI } = {\n    'a*': () => new AStarAI(),\n};\n\nexport function makeGame(p: p5) {\n    let game: EightPuzzle;\n    p.setup = () => {\n        game = new EightPuzzle(p, 3, 'a*');\n        // Enable this if needed for debugging\n        // game.putAIOnMainThread();\n        game.init();\n    };\n    p.draw = () => {\n        game?.draw();\n    };\n}\n","import { expose } from 'comlink';\nimport { Direction, Tile, Grid } from '../game/Grid';\nimport { solvers } from '../sketch';\n\nexport function calculateMoves(\n    solver: keyof typeof solvers,\n    size: number,\n    tiles: (number | null)[][],\n    freeCell: Tile,\n    desiredState: (number | null)[][]\n): Direction[] {\n    const grid = new Grid(size, tiles, freeCell);\n\n    const ai = solvers[solver]();\n\n    return ai.getMoves(grid, desiredState);\n}\n\nexpose(calculateMoves);\n"]}